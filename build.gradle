apply plugin: 'java'
apply plugin: 'eclipse'

configurations {
    hibernatetool
    jpamodelgen
	querydsl
}

repositories {
    mavenCentral()
}

dependencies {
	def slf4jVersion = '1.6.6'
	
    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.0-api', version: '1.0.1.Final'
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
	
    runtime group: 'org.hibernate', name: 'hibernate-entitymanager', version: '4.1.4.Final'
	runtime group: 'com.h2database', name: 'h2', version: '1.3.167'
	runtime group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
	
	// Criteria 
	jpamodelgen group: 'org.hibernate', name: 'hibernate-jpamodelgen', version: '1.2.0.Final'
	
	// LiquidForm
    compile (group: 'com.google.code.liquidform', name: 'liquidform.jpa', version: '1.0.0') {
		exclude group: 'javax.persistence', module: 'persistence-api'
	}
	
	// QueryDSL
	def querydslVersion = '2.7.0'
	compile group: 'com.mysema.querydsl', name: 'querydsl-jpa', version: querydslVersion
	querydsl group: 'com.mysema.querydsl', name: 'querydsl-apt', version: querydslVersion
	
	// SQL generation
    hibernatetool group: 'org.hibernate', name: 'hibernate-tools', version: '3.2.4.GA'
    hibernatetool group: 'org.hibernate', name: 'hibernate-entitymanager', version: '3.6.10.Final'
    hibernatetool group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    hibernatetool group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4jVersion
    
}

def persistenceUnit = "com.timgroup.jpa"

def entitySqlFile = new File(project.buildDir, "sql/${persistenceUnit}.sql")

def db = [
    url: "jdbc:h2:build/db/${persistenceUnit}", 
    driver: "org.h2.Driver"
]

task generateMetamodel(type: Compile, group: 'build', description: 'Generates the JPA2 static metamodel classes') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.jpamodelgen
    options.compilerArgs = [
        "-proc:only"
    ]
    destinationDir = sourceSets.main.java.srcDirs.iterator().next()
}
compileJava.dependsOn generateMetamodel

task generateQueryDSL(type: Compile, group: 'build', description: 'Generates the QueryDSL query types') {
	source = sourceSets.main.java
	classpath = configurations.compile + configurations.querydsl
	options.compilerArgs = [
		"-proc:only",
		"-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
	]
	destinationDir = sourceSets.main.java.srcDirs.iterator().next()
}
compileJava.dependsOn generateQueryDSL

task generateSql(dependsOn: classes, group: 'build', description: 'Generates SQL DDL for the entity classes') << {
    ant.taskdef(name: 'hibernatetool',
        classname: 'org.hibernate.tool.ant.HibernateToolTask',
        classpath: configurations.hibernatetool.asPath
    )
    entitySqlFile.parentFile.mkdirs()
    ant.hibernatetool(destdir: entitySqlFile.parentFile) {
        jpaconfiguration(persistenceunit: persistenceUnit)
        hbm2ddl(export: false, outputfilename: entitySqlFile.name, format: true)
        classpath { pathelement( path: sourceSets.main.output.asPath ) }
    }
}
assemble.dependsOn generateSql

task applySql(dependsOn: generateSql, group: 'deploy', description: 'Applies the SQL DDL for the entity classes to an H2 database in the build directory') << {
    // this is needed to get the H2 driver onto the Groovy classpath - and it has to be the Groovy classpath, not the build script one
    def loader = GroovyObject.class.classLoader
    configurations.runtime.each {File file ->
        loader.addURL(file.toURI().toURL())
    }
    def sql = groovy.sql.Sql.newInstance(db.url, null, null, db.driver)
    sql.execute(entitySqlFile.text)
}

eclipse {
    classpath {
        defaultOutputDir = file('.eclipse')
    }
}
